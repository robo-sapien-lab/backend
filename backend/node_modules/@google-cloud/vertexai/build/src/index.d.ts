/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { GoogleAuth } from 'google-auth-library';
import { Content, CountTokensRequest, CountTokensResponse, GenerateContentRequest, GenerateContentResult, GenerationConfig, ModelParams, Part, SafetySetting, StreamGenerateContentResult, VertexInit } from './types/content';
export * from './types';
/**
 * Base class for authenticating to Vertex, creates the preview namespace.
 * The base class object takes the following arguments:
 * @param project The Google Cloud project to use for the request
 * @param location The Google Cloud project location to use for the
 *     request
 * @param apiEndpoint Optional. The base Vertex AI endpoint to use for the
 *     request. If not provided, the default regionalized endpoint (i.e.
 * us-central1-aiplatform.googleapis.com) will be used.
 */
export declare class VertexAI {
    preview: VertexAI_Internal;
    constructor(init: VertexInit);
}
/**
 * VertexAI class internal implementation for authentication.
 * This class object takes the following arguments:
 * @param project The Google Cloud project to use for the request
 * @param location The Google Cloud project location to use for the request
 * @param apiEndpoint The base Vertex AI endpoint to use for the request. If
 *        not provided, the default regionalized endpoint
 *        (i.e. us-central1-aiplatform.googleapis.com) will be used.
*/
export declare class VertexAI_Internal {
    readonly project: string;
    readonly location: string;
    readonly apiEndpoint?: string | undefined;
    protected googleAuth: GoogleAuth;
    private tokenInternalPromise?;
    constructor(project: string, location: string, apiEndpoint?: string | undefined);
    get token(): Promise<any>;
    getGenerativeModel(modelParams: ModelParams): GenerativeModel;
}
/**
 * Params to initiate a multiturn chat with the model via startChat
 */
export declare interface StartChatParams {
    history?: Content[];
    safety_settings?: SafetySetting[];
    generation_config?: GenerationConfig;
    stream?: boolean;
}
/**
 * All params passed to initiate multiturn chat via startChat
 */
export declare interface StartChatSessionRequest extends StartChatParams {
    _vertex_instance: VertexAI_Internal;
    _model_instance: GenerativeModel;
}
/**
 * Session for a multiturn chat with the model
 */
export declare class ChatSession {
    private project;
    private location;
    private _send_stream_promise;
    private historyInternal;
    private _vertex_instance;
    private _model_instance;
    generation_config?: GenerationConfig;
    safety_settings?: SafetySetting[];
    get history(): Content[];
    constructor(request: StartChatSessionRequest);
    sendMessage(request: string | Array<string | Part>): Promise<GenerateContentResult>;
    appendHistory(streamGenerateContentResultPromise: Promise<StreamGenerateContentResult>, newContent: Content): Promise<void>;
    sendMessageStream(request: string | Array<string | Part>): Promise<StreamGenerateContentResult>;
}
/**
 * Base class for generative models.
 *
 * NOTE: this class should not be instantiated directly. Use
 * `vertexai.preview.getGenerativeModel()` instead.
 */
export declare class GenerativeModel {
    model: string;
    generation_config?: GenerationConfig;
    safety_settings?: SafetySetting[];
    private _vertex_instance;
    private _use_non_stream;
    constructor(vertex_instance: VertexAI_Internal, model: string, generation_config?: GenerationConfig, safety_settings?: SafetySetting[]);
    /**
     * Make a generateContent request.
     * @param request A GenerateContentRequest object with the request contents.
     * @return The GenerateContentResponse object with the response candidates.
     */
    generateContent(request: GenerateContentRequest): Promise<GenerateContentResult>;
    /**
     * Make a generateContentStream request.
     * @param request A GenerateContentRequest object with the request contents.
     * @return The GenerateContentResponse object with the response candidates.
     */
    generateContentStream(request: GenerateContentRequest): Promise<StreamGenerateContentResult>;
    /**
     * Make a countTokens request.
     * @param request A CountTokensRequest object with the request contents.
     * @return The CountTokensResponse object with the token count.
     */
    countTokens(request: CountTokensRequest): Promise<CountTokensResponse>;
    startChat(request: StartChatParams): ChatSession;
}
